{"version":3,"sources":["components/Card/index.jsx","components/Panel/index.jsx","components/Button/index.jsx","components/AddForm/index.jsx","components/containers/Panels.js","actions/panels.js","actions/cards.js","App.js","index.js","helpers/reorderCards.js","components/reducers/panels.js","components/reducers/index.js","components/store.js"],"names":["Card","card","panelIndex","cardIndex","draggableId","index","provided","snapshot","className","ref","innerRef","draggableProps","dragHandleProps","Paper","elevation","Panel","title","cards","isNewPanel","onAddPanel","onAddCard","onReorderCards","Typography","variant","type","droppableId","droppableProps","map","key","placeholder","Button","onAdd","inputState","color","disableElevation","onClick","AddForm","useState","showForm","setShowForm","setInputState","inputRef","useRef","useEffect","current","focus","InputBase","fullWidth","multiline","onChange","e","target","value","IconButton","connect","items","panels","addPanel","name","payload","addCard","text","reorderCards","source","destination","onDragEnd","result","item","App","Component","state","sourceCardIndex","sourceId","destinationCardIndex","destinationId","sourceColumnIndex","parseInt","replace","destinationColumnIndex","currentColumnIndex","splice","sourceCard","destinationCards","Array","from","initialState","combineReducers","action","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dd041d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport \"./Card.css\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst Card = ({ card, panelIndex, cardIndex }) => {\r\n  return (\r\n    <Draggable\r\n      draggableId={`card-${panelIndex}-${cardIndex}`}\r\n      index={cardIndex}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <div\r\n          className=\"card1\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Paper elevation={3} className=\"card\">\r\n            {card}\r\n          </Paper>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Card, AddForm } from \"../../components\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport \"./Panel.css\";\r\n\r\nconst Panel = ({\r\n  title,\r\n  cards,\r\n  isNewPanel,\r\n  onAddPanel,\r\n  onAddCard,\r\n  panelIndex,\r\n  onReorderCards\r\n}) => {\r\n  return (\r\n    <div className=\"panel\">\r\n      {title && (\r\n        <Typography variant=\"h6\" className=\"panel__title\">\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      {cards && (\r\n        <Droppable type=\"CARDS\" droppableId={`column-${panelIndex}`}>\r\n          {provided => (\r\n            <div {...provided.droppableProps} ref={provided.innerRef}>\r\n              {cards.map((card, index) => (\r\n                <Card\r\n                  key={index}\r\n                  card={card}\r\n                  panelIndex={panelIndex}\r\n                  cardIndex={index}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      )}\r\n\r\n      <AddForm\r\n        isNewPanel={isNewPanel}\r\n        onAddPanel={onAddPanel}\r\n        onAddCard={onAddCard}\r\n        panelIndex={panelIndex}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\nimport { Button as ButtonUI } from \"@material-ui/core\";\r\n\r\nconst Button = ({ isNewPanel, inputState, onAdd }) => {\r\n  return (\r\n    <ButtonUI\r\n      className=\"button\"\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      disableElevation\r\n      onClick={() => onAdd()}\r\n    >\r\n      {isNewPanel ? \"Добавить колонку\" : \"Добавить карточку\"}\r\n    </ButtonUI>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Fragment, useState, useRef, useEffect } from \"react\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\r\nimport \"./AddForm.css\";\r\nimport { Button } from \"../\";\r\nimport { InputBase, Paper, IconButton } from \"@material-ui/core\";\r\n\r\nconst AddForm = ({ isNewPanel, onAddPanel, onAddCard, panelIndex }) => {\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [inputState, setInputState] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const onAdd = () => {\r\n    if (inputState) {\r\n      if (isNewPanel) {\r\n        onAddPanel(inputState);\r\n      } else {\r\n        onAddCard(panelIndex, inputState);\r\n      }\r\n      setInputState(\"\");\r\n      setShowForm(!showForm);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) inputRef.current.focus();\r\n  }, [showForm]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {showForm ? (\r\n        <div className=\"add-form\">\r\n          <div className=\"add-form-input\">\r\n            <Paper className=\"input-wrap\">\r\n              <InputBase\r\n                fullWidth\r\n                multiline\r\n                placeholder={\r\n                  isNewPanel\r\n                    ? \"Введите название колонки\"\r\n                    : \"Введите название карточки\"\r\n                }\r\n                inputRef={inputRef}\r\n                onChange={e => setInputState(e.target.value)}\r\n                value={inputState}\r\n              />\r\n            </Paper>\r\n            <div className=\"button-wrap\">\r\n              <Button\r\n                isNewPanel={isNewPanel}\r\n                inputState={inputState}\r\n                onAdd={onAdd}\r\n              />\r\n              <IconButton\r\n                onClick={() => {\r\n                  setShowForm(!showForm);\r\n                }}\r\n              >\r\n                <CloseOutlinedIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          className=\"panel__bottom-add-btn\"\r\n          onClick={() => {\r\n            setShowForm(!showForm);\r\n          }}\r\n        >\r\n          <AddOutlinedIcon />\r\n          <span>\r\n            {isNewPanel\r\n              ? \"Добавить еще одну колонку\"\r\n              : \"Добавить еще одну карточку\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddForm;\r\n","import React, { Fragment } from \"react\";\r\nimport { Panel } from \"../../components\";\r\nimport { connect } from \"react-redux\";\r\nimport panelsActions from \"../../actions/panels\";\r\nimport cardsActions from \"../../actions/cards\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nconst Panels = ({ items, addPanel, addCard, reorderCards }) => {\r\n  const onDragEnd = result => {\r\n    const { source, destination } = result;\r\n    if (\r\n      !destination ||\r\n      (source.droppableId === destination.droppableId &&\r\n        source.index === destination.index)\r\n    ) {\r\n      return;\r\n    }\r\n    reorderCards({\r\n      source,\r\n      destination\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        {items.map((item, index) => (\r\n          <Panel\r\n            key={index}\r\n            panelIndex={index}\r\n            onAddPanel={addPanel}\r\n            onAddCard={addCard}\r\n            onReorderCards={reorderCards}\r\n            {...item}\r\n          />\r\n        ))}\r\n      </DragDropContext>\r\n      <Panel isNewPanel onAddPanel={addPanel} onAddCard={addCard} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(({ panels }) => ({ items: panels }), {\r\n  ...panelsActions,\r\n  ...cardsActions\r\n})(Panels);\r\n","export default {\r\n  addPanel: name => ({\r\n    type: \"PANEL:ADD\",\r\n    payload: name\r\n  })\r\n};\r\n","export default {\r\n  addCard: (panelIndex, text) => ({\r\n    type: \"CARDS:ADD\",\r\n    payload: {\r\n      panelIndex,\r\n      text\r\n    }\r\n  }),\r\n  reorderCards: ({ source, destination }) => ({\r\n    type: \"CARDS:REORDER\",\r\n    payload: {\r\n      source,\r\n      destination\r\n    }\r\n  })\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Panels } from \"./components/containers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Panels />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./components/store\";\n\nconst render = Component =>\n  ReactDOM.render(\n    <Provider store={store}>\n      <Component />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n\nrender(App);\n\nif (module.hot) {\n  module.hot.accept(\"./App\", () => {\n    const NextApp = require(\"./App\").default;\n    render(NextApp);\n  });\n}\n","export default ({ state, source, destination }) => {\r\n  const { index: sourceCardIndex, droppableId: sourceId } = source;\r\n  const {\r\n    index: destinationCardIndex,\r\n    droppableId: destinationId\r\n  } = destination;\r\n  const sourceColumnIndex = parseInt(sourceId.replace(\"column-\", \"\"));\r\n  const destinationColumnIndex = parseInt(destinationId.replace(\"column-\", \"\"));\r\n\r\n  return state.map((item, currentColumnIndex) => {\r\n    if (destinationColumnIndex === currentColumnIndex) {\r\n      const [sourceCard] = state[sourceColumnIndex].cards.splice(\r\n        sourceCardIndex,\r\n        1\r\n      );\r\n      const destinationCards = Array.from(state[destinationColumnIndex].cards);\r\n      destinationCards.splice(destinationCardIndex, 0, sourceCard);\r\n      item.cards = destinationCards;\r\n    }\r\n\r\n    return item;\r\n  });\r\n};\r\n","import reorderCards from \"../../helpers/reorderCards\";\r\n\r\nconst initialState = [\r\n  {\r\n    title: \"План на месяц\",\r\n    cards: [\r\n      \"Пройти курс по React\",\r\n      \"Отметить день рождения\",\r\n      \"Записаться на курсы английского языка, чтобы уехать жить в Лондон\",\r\n      \"Пройти курс по React\",\r\n      \"Отметить день рождения\",\r\n\r\n      \"Записаться на курсы английского языка, чтобы уехать жить в Лондон\"\r\n    ]\r\n  },\r\n  {\r\n    title: \"План на день\",\r\n    cards: [\r\n      \"Записаться на курс по React\",\r\n      \"Забронировать тир на субботу\",\r\n      \"Накидать тем для статей в блог\",\r\n      \"Сделать колонку Итоги\"\r\n    ]\r\n  }\r\n];\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CARDS:ADD\":\r\n      return state.map((item, index) => {\r\n        if (action.payload.panelIndex === index) {\r\n          if (item.cards) {\r\n            return {\r\n              ...item,\r\n              cards: [...item.cards, action.payload.text]\r\n            };\r\n          }\r\n        }\r\n        return item;\r\n      });\r\n\r\n    case \"CARDS:REORDER\": {\r\n      const { source, destination } = action.payload;\r\n      return reorderCards({\r\n        state,\r\n        source,\r\n        destination\r\n      });\r\n    }\r\n\r\n    case \"PANEL:ADD\":\r\n      return [...state, { title: action.payload, cards: [] }];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport panels from \"./panels\";\r\n\r\nexport default combineReducers({\r\n  panels\r\n});\r\n","import { createStore } from \"redux\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n"],"sourceRoot":""}